{"version":3,"sources":["src/app/inspectionPlans/inspectionPlans-edit/inspectionPlans-edit.component.html","src/app/inspectionPlans/inspectionPlans-list/inspectionPlans-list.component.html","src/app/inspectionPlans/inspectionPlans.component.html","src/app/Core/core.module.ts","src/app/Core/guards/authentication.guard.ts","src/app/Core/services/application.service.ts","src/app/Core/services/http-request-interceptor.ts","src/app/Core/services/security.service.ts","src/app/Core/services/token.service.ts","src/app/inspectionPlans/inspectionPlans-edit/inspectionPlans-edit.component.css","src/app/inspectionPlans/inspectionPlans-edit/inspectionPlans-edit.component.ts","src/app/inspectionPlans/inspectionPlans-list/inspectionPlans-list.component.css","src/app/inspectionPlans/inspectionPlans-list/inspectionPlans-list.component.ts","src/app/inspectionPlans/inspectionPlans-routing.module.ts","src/app/inspectionPlans/inspectionPlans.component.css","src/app/inspectionPlans/inspectionPlans.component.ts","src/app/inspectionPlans/inspectionPlans.module.ts","src/app/inspectionPlans/inspectionPlans.service.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<p>Add/Edit inspectionPlan</p>\\r\\n\\r\\n<mat-card class=\\\"example-card\\\">\\r\\n  <form *ngIf=\\\"formGroup\\\" [formGroup]=\\\"formGroup\\\">\\r\\n    <div class=\\\"example-container\\\">\\r\\n\\r\\n      <mat-form-field>\\r\\n        <input matInput placeholder=\\\"Description\\\" formControlName=\\\"description\\\" type=\\\"text\\\">\\r\\n        <mat-error *ngIf=\\\"formGroup.get('description').touched && formGroup.get('description').errors && formGroup.get('description').errors.required\\\">\\r\\n          Name required!\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n\\r\\n      <mat-form-field>\\r\\n        <input matInput placeholder=\\\"Temperature\\\" formControlName=\\\"temperature\\\" type=\\\"number\\\">\\r\\n        <mat-error *ngIf=\\\"formGroup.get('temperature').touched && formGroup.get('temperature').errors && formGroup.get('temperature').errors.required\\\">\\r\\n          Temperature\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n\\r\\n      <mat-form-field>\\r\\n        <input matInput placeholder=\\\"Humidity\\\" formControlName=\\\"humidity\\\" type=\\\"number\\\">\\r\\n        <mat-error *ngIf=\\\"formGroup.get('humidity').touched && formGroup.get('humidity').errors && formGroup.get('humidity').errors.required\\\">\\r\\n          Humidity required!\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n\\r\\n      <mat-form-field>\\r\\n        <input matInput placeholder=\\\"Pressure\\\" formControlName=\\\"pressure\\\" type=\\\"number\\\">\\r\\n        <mat-error *ngIf=\\\"formGroup.get('pressure').touched && formGroup.get('pressure').errors && formGroup.get('pressure').errors.required\\\">\\r\\n          Pressure required!\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n\\r\\n      <mat-form-field>\\r\\n        <input matInput placeholder=\\\"PersonId\\\" formControlName=\\\"personId\\\" type=\\\"number\\\">\\r\\n        <mat-error *ngIf=\\\"formGroup.get('personId').touched && formGroup.get('personId').errors && formGroup.get('personId').errors.required\\\">\\r\\n          Person required!\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"example-button-row\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"save()\\\">Save</button>\\r\\n      <button mat-raised-button color=\\\"primary\\\" [routerLink]='routerLink'>Cancel</button>\\r\\n    </div>\\r\\n  </form>\\r\\n</mat-card>\\r\\n\"","export default \"<h1>Inspection Plans</h1>\\r\\n\\r\\n<p>Many Inspection Plans in the list</p>\\r\\n\\r\\n<div class=\\\"example-button-row\\\">\\r\\n  <button mat-raised-button [routerLink]='[\\\"../edit\\\"]' color=\\\"primary\\\">Add</button>\\r\\n</div>\\r\\n<br>\\r\\n\\r\\n<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n\\r\\n<div class=\\\"mat-elevation-z8\\\">\\r\\n  <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n    <ng-container matColumnDef=\\\"description\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"width:21%\\\"> Description </th>\\r\\n      <td mat-cell *matCellDef=\\\"let inspection\\\"> {{inspection.description}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n\\r\\n    <ng-container matColumnDef=\\\"temperature\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"width:21%\\\"> Temperature </th>\\r\\n      <td mat-cell *matCellDef=\\\"let inspection\\\"> {{inspection.temperature}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"humidity\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"width:21%\\\"> Humidity </th>\\r\\n      <td mat-cell *matCellDef=\\\"let inspection\\\"> {{inspection.humidity}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"pressure\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"width:21%\\\"> Pressure </th>\\r\\n      <td mat-cell *matCellDef=\\\"let inspection\\\"> {{inspection.pressure}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"personId\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"width:21%\\\"> PersonId </th>\\r\\n      <td mat-cell *matCellDef=\\\"let inspection\\\"> {{inspection.personId}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"action\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"width:10%\\\"> Action </th>\\r\\n      <td mat-cell *matCellDef=\\\"let inspectionPlan\\\">\\r\\n        <button mat-icon-button matTooltip=\\\"Edit\\\" [matTooltipPosition]=\\\"'after'\\\">\\r\\n          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\" [routerLink]=\\\"['../edit', inspectionPlan.id]\\\">edit</mat-icon>\\r\\n        </button>\\r\\n        <button mat-icon-button matTooltip=\\\"Delete\\\" [matTooltipPosition]=\\\"'after'\\\">\\r\\n          <mat-icon aria-label=\\\"Example icon-button with a heart icon \\\" (click)=\\\"deleteInspectionPlan(inspectionPlan)\\\">delete</mat-icon>\\r\\n        </button>\\r\\n      </td>\\r\\n    </ng-container> -->\\r\\n\\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n  </table>\\r\\n  <mat-progress-bar mode=\\\"indeterminate\\\" *ngIf=\\\"!inspectionPlans\\\"></mat-progress-bar>\\r\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n\\r\\n</div>\\r\\n\"","export default \"<router-outlet></router-outlet>\\r\\n\"","import { NgModule } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { AuthenticationGuard } from './guards/authentication.guard';\r\n\r\nimport { HttpRequestInterceptor } from './services/http-request-interceptor';\r\n\r\nimport { SecurityService } from './services/security.service';\r\nimport { TokenService } from './services/token.service';\r\nimport { ApplicationService } from './services/application.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n  ],\r\n  imports: [],\r\n  providers: [\r\n    AuthenticationGuard,\r\n    SecurityService,\r\n    TokenService,\r\n    ApplicationService,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: HttpRequestInterceptor,\r\n      multi: true\r\n    }\r\n  ],\r\n  exports: []\r\n})\r\n\r\nexport class CoreModule {\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class AuthenticationGuard implements CanActivate {\r\n  constructor() { }\r\n\r\n  canActivate() {\r\n    return true;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TokenService } from './token.service';\r\n\r\n@Injectable()\r\nexport class ApplicationService {\r\n\r\n  public baseUrl: string;\r\n\r\n  constructor(private tokenService: TokenService) {\r\n    this.baseUrl = document.getElementsByTagName('base')[0].href;\r\n  }\r\n\r\n  isLoggedIn() {\r\n    return this.tokenService.getToken() != null;\r\n  }\r\n\r\n  userEmail() {\r\n    var token = this.tokenService.getToken();\r\n\r\n    if (token != null)\r\n      return token.email;\r\n\r\n    return \"\";\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpRequest, HttpErrorResponse, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { empty, Observable, throwError, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { TokenService } from './token.service';\r\nimport { Token } from './security.models';\r\n\r\n@Injectable()\r\nexport class HttpRequestInterceptor implements HttpInterceptor {\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private tokenService: TokenService\r\n  ) { }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    var token: Token = this.tokenService.getToken();\r\n\r\n    request = token ? request.clone(\r\n      {\r\n        headers: request.headers.set(\"Authorization\", \"Bearer \" + token.value)\r\n      }\r\n    ) : request;\r\n\r\n    return next.handle(request).pipe(\r\n      catchError(\r\n        (error: HttpErrorResponse, caught: Observable<HttpEvent<HttpErrorResponse>>) => {\r\n\r\n          if (error.status === 401) {\r\n            this.router.navigate(['/login']);\r\n            return of<HttpEvent<HttpErrorResponse>>();\r\n          }\r\n\r\n          if (error.status === 403) {\r\n            this.router.navigate(['/forbidden']);\r\n            return of<HttpEvent<HttpErrorResponse>>();\r\n          }\r\n          return throwError(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observer, Observable } from 'rxjs';\r\n\r\nimport { Token, RegisterModel, LoginModel } from './security.models';\r\nimport { TokenService } from './token.service';\r\nimport { ApplicationService } from './application.service';\r\n\r\n@Injectable()\r\nexport class SecurityService {\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private tokenService: TokenService,\r\n    private applicationService: ApplicationService) {\r\n  }\r\n\r\n  register(registerModel: RegisterModel) {\r\n    return new Observable<Token>((obs: Observer<Token>) => {\r\n      this.httpClient.post<Token>(`${this.applicationService.baseUrl}Account/Register`, registerModel).subscribe(token => {\r\n\r\n        this.tokenService.saveToken(token);\r\n\r\n        obs.next(token);\r\n        obs.complete();\r\n      });\r\n    });\r\n  }\r\n\r\n  login(loginModel: LoginModel) {\r\n    return new Observable<Token>((obs: Observer<Token>) => {\r\n      this.httpClient.post<Token>(`${this.applicationService.baseUrl}Account/Login`, loginModel).subscribe(token => {\r\n\r\n        this.tokenService.saveToken(token);\r\n\r\n        obs.next(token);\r\n        obs.complete();\r\n      });\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    this.tokenService.deleteToken();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Token } from './security.models';\r\n\r\n@Injectable()\r\nexport class TokenService {\r\n\r\n  constructor() { }\r\n\r\n  saveToken(token: Token) {\r\n    localStorage.setItem(\"token\", JSON.stringify(token));\r\n  }\r\n\r\n  getToken(): Token | null {\r\n    return this.validate(JSON.parse(localStorage.getItem(\"token\") as string));\r\n  }\r\n\r\n  validate(token: Token | null): Token | null {\r\n    if (token) {\r\n      if (new Date(token.expiry) > new Date())\r\n        return token;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  deleteToken() {\r\n    localStorage.removeItem(\"token\");\r\n  }\r\n}\r\n","export default \".example-container {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  padding: 5px;\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n  .example-container > * {\\r\\n    width: 100%;\\r\\n  }\\r\\n\\r\\n  body {\\r\\n  background-image: none;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvaW5zcGVjdGlvblBsYW5zL2luc3BlY3Rpb25QbGFucy1lZGl0L2luc3BlY3Rpb25QbGFucy1lZGl0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLFlBQVk7RUFDWixtQkFBbUI7QUFDckI7O0VBRUU7SUFDRSxXQUFXO0VBQ2I7O0VBRUY7RUFDRSxzQkFBc0I7QUFDeEIiLCJmaWxlIjoic3JjL2FwcC9pbnNwZWN0aW9uUGxhbnMvaW5zcGVjdGlvblBsYW5zLWVkaXQvaW5zcGVjdGlvblBsYW5zLWVkaXQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5leGFtcGxlLWNvbnRhaW5lciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIHBhZGRpbmc6IDVweDtcclxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG59XHJcblxyXG4gIC5leGFtcGxlLWNvbnRhaW5lciA+ICoge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG5cclxuYm9keSB7XHJcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcclxufVxyXG4iXX0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { InspectionPlansService } from '../inspectionPlans.service';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { InspectionPlan } from '../inspectionPlans.models';\r\n\r\n@Component({\r\n  selector: 'app-inspectionPlans-edit',\r\n  templateUrl: './inspectionPlans-edit.component.html',\r\n  styleUrls: ['./inspectionPlans-edit.component.css']\r\n})\r\nexport class InspectionPlansEditComponent implements OnInit {\r\n\r\n  private routerLink: string = '../list';\r\n\r\n  private inspectionPlanId: number;\r\n\r\n  private isEdit: boolean = false;\r\n\r\n  private formGroup: FormGroup;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private inspectionPlansService: InspectionPlansService,\r\n    private formBuilder: FormBuilder) {}\r\n  \r\n  ngOnInit() {\r\n    this.inspectionPlanId = parseInt(this.route.snapshot.params['id']);\r\n\r\n    if (this.inspectionPlanId) {\r\n      this.routerLink = '../../list';\r\n\r\n      this.inspectionPlansService.getInspectionPlan(this.inspectionPlanId).subscribe(res => {\r\n        this.initForm(res);\r\n        this.isEdit = true;\r\n      });\r\n    }\r\n\r\n    else {\r\n      this.initForm(<InspectionPlan>{});\r\n    }\r\n  }\r\n\r\n  save() {\r\n    Object.keys(this.formGroup.controls).forEach(control => {\r\n      this.formGroup.get(control).markAsTouched();\r\n    });\r\n\r\n    if (this.formGroup.valid) {\r\n      let inspectionPlan = this.formGroup.value as InspectionPlan;\r\n      inspectionPlan.description = inspectionPlan.description;\r\n      inspectionPlan.temperature = inspectionPlan.temperature;\r\n      inspectionPlan.humidity = inspectionPlan.humidity;\r\n      inspectionPlan.pressure = inspectionPlan.pressure;\r\n      inspectionPlan.personId = inspectionPlan.personId;\r\n\r\n      if (this.isEdit) {\r\n        inspectionPlan.id = this.inspectionPlanId;\r\n\r\n        this.inspectionPlansService.modifyInspectionPlan(inspectionPlan).subscribe(res => {\r\n          this.router.navigate(['/inspectionPlans']);\r\n        });\r\n      } else {\r\n\r\n        this.inspectionPlansService.saveInspectionPlan(inspectionPlan).subscribe(res => {\r\n          this.router.navigate(['/inspectionPlans']);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  initForm(inspectionPlan: InspectionPlan) {\r\n    this.formGroup = this.formBuilder.group({\r\n      description: [inspectionPlan.description, Validators.required],\r\n      temperature: [inspectionPlan.temperature, Validators.required],\r\n      humidity: [inspectionPlan.humidity, Validators.required],\r\n      pressure: [inspectionPlan.pressure, Validators.required],\r\n      personId: [inspectionPlan.personId, Validators.required],\r\n    });\r\n  }\r\n}\r\n","export default \"table {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvaW5zcGVjdGlvblBsYW5zL2luc3BlY3Rpb25QbGFucy1saXN0L2luc3BlY3Rpb25QbGFucy1saXN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsV0FBVztBQUNiIiwiZmlsZSI6InNyYy9hcHAvaW5zcGVjdGlvblBsYW5zL2luc3BlY3Rpb25QbGFucy1saXN0L2luc3BlY3Rpb25QbGFucy1saXN0LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi5tYXQtZm9ybS1maWVsZCB7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59XHJcbiJdfQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { InspectionPlan } from '../inspectionPlans.models';\r\nimport { InspectionPlansService } from '../inspectionPlans.service';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { PageEvent } from '@angular/material/paginator';\r\n\r\n@Component({\r\n  selector: 'app-inspectionPlans-list',\r\n  templateUrl: './inspectionPlans-list.component.html',\r\n  styleUrls: ['./inspectionPlans-list.component.css']\r\n})\r\nexport class InspectionPlansListComponent implements OnInit {\r\n\r\n  public displayedColumns: string[] = ['description', 'temperature', 'humidity', 'pressure', 'personId', 'action' ];\r\n  public inspectionPlans: InspectionPlan[]\r\n\r\n  public dataSource;\r\n  public isloading = false;\r\n\r\n  constructor(private inspectionPlansService: InspectionPlansService) { }\r\n\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n\r\n  ngOnInit() {\r\n      this.loadInspectionPlans();\r\n  }\r\n\r\n  async loadInspectionPlans() {\r\n    try {\r\n      this.inspectionPlansService.listInspectionPlans().subscribe(res => {\r\n        this.inspectionPlans = res;\r\n        this.dataSource = new MatTableDataSource(this.inspectionPlans);\r\n        this.isloading = true;\r\n        this.dataSource.paginator = this.paginator;\r\n      });\r\n    } catch (err) {\r\n      console.error('this is not good: ${err/Message}')\r\n      this.isloading = false;\r\n    }\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  deleteInspectionPlan(inspectionPlan: InspectionPlan) {\r\n      this.inspectionPlansService.deleteInspectionPlan(inspectionPlan.id).subscribe(x => {\r\n        this.loadInspectionPlans();\r\n    })\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { InspectionPlansComponent } from './inspectionPlans.component';\nimport { InspectionPlansEditComponent } from './inspectionPlans-edit/inspectionPlans-edit.component';\nimport { InspectionPlansListComponent } from './inspectionPlans-list/inspectionPlans-list.component';\n\n\nconst routes: Routes = [\n  {\n    path: '', component: InspectionPlansComponent,\n    children: [\n      { path: '', redirectTo: 'list', pathMatch: 'full' },\n      { path: 'list', component: InspectionPlansListComponent },\n      { path: 'edit/:id', component: InspectionPlansEditComponent },\n      { path: 'edit', component: InspectionPlansEditComponent },\n    ]\n  }\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\n\nexport class InspectionPlansRoutingModule {\n  static routedComponents = [InspectionPlansComponent, InspectionPlansListComponent, InspectionPlansEditComponent];\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2luc3BlY3Rpb25QbGFucy9pbnNwZWN0aW9uUGxhbnMuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-inspectionPlans',\n  templateUrl: './inspectionPlans.component.html',\n  styleUrls: ['./inspectionPlans.component.css']\n})\nexport class InspectionPlansComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { CoreModule } from '../Core/core.module';\r\nimport { AngularMaterialModule } from '../shared/angular-material.module';\r\n\r\nimport { InspectionPlansRoutingModule } from './inspectionPlans-routing.module';\r\nimport { InspectionPlansService } from './inspectionPlans.service';\r\n\r\n@NgModule({\r\n  declarations: [InspectionPlansRoutingModule.routedComponents],\r\n  imports: [\r\n      CommonModule,\r\n      InspectionPlansRoutingModule,\r\n      AngularMaterialModule,\r\n      CoreModule,\r\n      FormsModule,\r\n      ReactiveFormsModule\r\n  ],\r\n  providers: [InspectionPlansService]\r\n})\r\nexport class InspectionPlansModule { }\r\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { InspectionPlan } from \"./inspectionPlans.models\";\nimport { ApplicationService } from \"../core/services/application.service\";\n\n@Injectable()\nexport class InspectionPlansService {\n\n  constructor(\n    private http: HttpClient,\n    private applicationService: ApplicationService) { }\n\n  getInspectionPlan(id: number) {\n    return this.http.get<InspectionPlan>(`${this.applicationService.baseUrl}api/InspectionPlans/${id}`);\n  }\n\n  listInspectionPlans() {\n    return this.http.get<InspectionPlan[]>(`${this.applicationService.baseUrl}api/InspectionPlans`);\n  }\n\n  saveInspectionPlan(inspectionPlan: InspectionPlan) {\n    return this.http.post(`${this.applicationService.baseUrl}api/InspectionPlans`, inspectionPlan);\n  }\n\n  modifyInspectionPlan(inspectionPlan: InspectionPlan) {\n    return this.http.put(`${this.applicationService.baseUrl}api/InspectionPlans/${inspectionPlan.id}`, inspectionPlan);\n  }\n\n  deleteInspectionPlan(id: number) {\n    return this.http.delete<any>(`${this.applicationService.baseUrl}api/InspectionPlans/${id}`);\n  }\n}\n"],"sourceRoot":"webpack:///","file":"inspectionPlans-inspectionPlans-module-es5.js"}