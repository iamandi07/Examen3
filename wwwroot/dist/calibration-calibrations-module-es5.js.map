{"version":3,"sources":["src/app/calibration/calibrations-edit/calibrations-edit.component.html","src/app/calibration/calibrations-list/calibrations-list.component.html","src/app/calibration/calibrations.component.html","src/app/calibration/calibrations-edit/calibrations-edit.component.css","src/app/calibration/calibrations-edit/calibrations-edit.component.ts","src/app/calibration/calibrations-list/calibrations-list.component.css","src/app/calibration/calibrations-list/calibrations-list.component.ts","src/app/calibration/calibrations-routing.module.ts","src/app/calibration/calibrations.component.css","src/app/calibration/calibrations.component.ts","src/app/calibration/calibrations.module.ts","src/app/calibration/calibrations.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,0qCAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,y/DAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,qCAAA;;;;;;;;;;;;;;;;ACAf,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,ygCAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWf,QAAa,yBAAb;AAUE,yCACU,MADV,EAEU,KAFV,EAGU,mBAHV,EAIU,WAJV,EAIkC;AAAA;;AAHxB,aAAA,MAAA,GAAA,MAAA;AACA,aAAA,KAAA,GAAA,KAAA;AACA,aAAA,mBAAA,GAAA,mBAAA;AACA,aAAA,WAAA,GAAA,WAAA;AAZF,aAAA,UAAA,GAAqB,SAArB;AAIA,aAAA,MAAA,GAAkB,KAAlB;AAQ+B;;AAdzC;AAAA;AAAA,mCAgBU;AAAA;;AAEN,eAAK,aAAL,GAAqB,QAAQ,CAAC,KAAK,KAAL,CAAW,QAAX,CAAoB,MAApB,CAA2B,IAA3B,CAAD,CAA7B;;AAEA,cAAI,KAAK,aAAT,EAAwB;AACtB,iBAAK,UAAL,GAAkB,YAAlB;AAEA,iBAAK,mBAAL,CAAyB,cAAzB,CAAwC,KAAK,aAA7C,EAA4D,SAA5D,CAAsE,UAAA,GAAG,EAAG;AAC1E,cAAA,KAAI,CAAC,QAAL,CAAc,GAAd;;AACA,cAAA,KAAI,CAAC,MAAL,GAAc,IAAd;AACD,aAHD;AAID,WAPD,MAQK;AACH,iBAAK,QAAL,CAA2B,EAA3B;AACD;AACF;AA/BH;AAAA;AAAA,+BAiCM;AAAA;;AACF,UAAA,MAAM,CAAC,IAAP,CAAY,KAAK,SAAL,CAAe,QAA3B,EAAqC,OAArC,CAA6C,UAAA,OAAO,EAAG;AACrD,YAAA,MAAI,CAAC,SAAL,CAAe,GAAf,CAAmB,OAAnB,EAA4B,aAA5B;AACD,WAFD;;AAIA,cAAI,KAAK,SAAL,CAAe,KAAnB,EAA0B;AACxB,gBAAI,WAAW,GAAG,KAAK,SAAL,CAAe,KAAjC;AACA,YAAA,WAAW,CAAC,WAAZ,GAA0B,WAAW,CAAC,WAAtC;AACA,YAAA,WAAW,CAAC,QAAZ,GAAuB,WAAW,CAAC,QAAnC;;AAEA,gBAAI,KAAK,MAAT,EAAiB;AACf,cAAA,WAAW,CAAC,WAAZ,GAA0B,KAAK,aAA/B;AAEA,mBAAK,mBAAL,CAAyB,iBAAzB,CAA2C,WAA3C,EAAwD,SAAxD,CAAkE,UAAA,GAAG,EAAG;AACtE,gBAAA,MAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,CAAC,eAAD,CAArB;AACD,eAFD;AAGD,aAND,MAMO;AAEL,mBAAK,mBAAL,CAAyB,gBAAzB,CAA0C,WAA1C,EAAuD,SAAvD,CAAiE,UAAA,GAAG,EAAG;AACrE,gBAAA,MAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,CAAC,eAAD,CAArB;AACD,eAFD;AAGD;AACF;AACF;AAxDH;AAAA;AAAA,iCA0DW,WA1DX,EA0DmC;AAC/B,eAAK,SAAL,GAAiB,KAAK,WAAL,CAAiB,KAAjB,CAAuB;AACtC,YAAA,WAAW,EAAE,CAAC,WAAW,CAAC,WAAb,EAA0B,2CAAA,CAAA,YAAA,CAAA,CAAW,QAArC,CADyB;AAEtC,YAAA,QAAQ,EAAE,CAAC,WAAW,CAAC,QAAb,EAAuB,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAlC;AAF4B,WAAvB,CAAjB;AAID;AA/DH;;AAAA;AAAA,OAAA;;;;cAWoB,4CAAA,CAAA,QAAA;;cACD,4CAAA,CAAA,gBAAA;;cACc,kDAAA,CAAA,qBAAA;;cACR,2CAAA,CAAA,aAAA;;;;AAdZ,IAAA,yBAAyB,GAAA,UAAA,CAAA,CALrC,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,uBADD;AAET,MAAA,QAAA,EAAA,eAAA,CAAA,mBAAA;AAAA;AAAA,sHAAA,CAAA,CAAA,WAFS;;;;AAAA,KAAV,CAKqC,E,iCAWlB,4CAAA,CAAA,QAAA,C,EACD,4CAAA,CAAA,gBAAA,C,EACc,kDAAA,CAAA,qBAAA,C,EACR,2CAAA,CAAA,aAAA,C,EAda,CAAA,EAAzB,yBAAyB,CAAzB;;;;;;;;;;;;;;;;ACXb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,2pBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWf,QAAa,yBAAb;AAQE,yCAAoB,mBAApB,EAA4D;AAAA;;AAAxC,aAAA,mBAAA,GAAA,mBAAA;AANb,aAAA,gBAAA,GAA6B,CAAC,aAAD,EAAgB,UAAhB,EAA4B,QAA5B,CAA7B;AAIA,aAAA,SAAA,GAAY,KAAZ;AAE0D;;AARnE;AAAA;AAAA,mCAYU;AACN,eAAK,gBAAL;AACD;AAdH;AAAA;AAAA,2CAgBwB;;;;;;;;AACpB,wBAAI;AACF,2BAAK,mBAAL,CAAyB,gBAAzB,GAA4C,SAA5C,CAAsD,UAAA,GAAG,EAAG;AAC1D,wBAAA,MAAI,CAAC,YAAL,GAAoB,GAApB;AACA,wBAAA,MAAI,CAAC,UAAL,GAAkB,IAAI,8CAAA,CAAA,oBAAA,CAAJ,CAAuB,MAAI,CAAC,YAA5B,CAAlB;AACA,wBAAA,MAAI,CAAC,SAAL,GAAiB,IAAjB;AACA,wBAAA,MAAI,CAAC,UAAL,CAAgB,SAAhB,GAA4B,MAAI,CAAC,SAAjC;AACD,uBALD;AAMD,qBAPD,CAOE,OAAO,GAAP,EAAY;AACZ,sBAAA,OAAO,CAAC,KAAR,6BAAmC,GAAG,CAAC,OAAvC;AACA,2BAAK,SAAL,GAAiB,KAAjB;AACD;;;;;;;;;AACF;AA5BH;AAAA;AAAA,oCA8Bc,WA9Bd,EA8BiC;AAC7B,eAAK,UAAL,CAAgB,MAAhB,GAAyB,WAAW,CAAC,IAAZ,GAAmB,WAAnB,EAAzB;AACD;AAhCH;AAAA;AAAA,0CAkCoB,WAlCpB,EAkC4C;AAAA;;AACxC,eAAK,mBAAL,CAAyB,iBAAzB,CAA2C,WAAW,CAAC,WAAvD,EAAoE,SAApE,CAA8E,UAAA,CAAC,EAAG;AAChF,YAAA,MAAI,CAAC,gBAAL;AACD,WAFD;AAGD;AAtCH;;AAAA;AAAA,OAAA;;;;cAQ2C,kDAAA,CAAA,qBAAA;;;;AAEE,IAAA,UAAA,CAAA,CAA1C,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU,8CAAA,CAAA,cAAA,CAAV,EAAwB;AAAE,gBAAQ;AAAV,KAAxB,CAA0C,E,0BAAW,8CAAA,CAAA,cAAA,C,CAAX,CAAA,E,mCAAA,E,WAAA,E,KAAwB,CAAxB,CAAA;;AAVhC,IAAA,yBAAyB,GAAA,UAAA,CAAA,CALrC,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,uBADD;AAET,MAAA,QAAA,EAAA,eAAA,CAAA,mBAAA;AAAA;AAAA,sHAAA,CAAA,CAAA,WAFS;;;;AAAA,KAAV,CAKqC,E,iCAQK,kDAAA,CAAA,qBAAA,C,EARL,CAAA,EAAzB,yBAAyB,CAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHb,QAAM,MAAM,GAAW,CACrB;AACE,MAAA,IAAI,EAAE,EADR;AACY,MAAA,SAAS,EAAE,oDAAA,CAAA,uBAAA,CADvB;AAEE,MAAA,QAAQ,EAAE,CACR;AAAE,QAAA,IAAI,EAAE,EAAR;AAAY,QAAA,UAAU,EAAE,MAAxB;AAAgC,QAAA,SAAS,EAAE;AAA3C,OADQ,EAER;AAAE,QAAA,IAAI,EAAE,MAAR;AAAgB,QAAA,SAAS,EAAE,2EAAA,CAAA,2BAAA;AAA3B,OAFQ,EAGR;AAAE,QAAA,IAAI,EAAE,UAAR;AAAoB,QAAA,SAAS,EAAE,2EAAA,CAAA,2BAAA;AAA/B,OAHQ,EAIR;AAAE,QAAA,IAAI,EAAE,MAAR;AAAgB,QAAA,SAAS,EAAE,2EAAA,CAAA,2BAAA;AAA3B,OAJQ;AAFZ,KADqB,CAAvB;;AAiBA,QAAa,yBAAb;AAAA;AAAA,KAAA;;AACS,IAAA,yBAAA,CAAA,gBAAA,GAAmB,CAAC,oDAAA,CAAA,uBAAA,CAAD,EAAwB,2EAAA,CAAA,2BAAA,CAAxB,EAAmD,2EAAA,CAAA,2BAAA,CAAnD,CAAnB;AADI,IAAA,yBAAyB,GAAA,UAAA,CAAA,CALrC,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS;AACR,MAAA,OAAO,EAAE,CAAC,4CAAA,CAAA,cAAA,CAAA,CAAa,QAAb,CAAsB,MAAtB,CAAD,CADD;AAER,MAAA,OAAO,EAAE,CAAC,4CAAA,CAAA,cAAA,CAAD;AAFD,KAAT,CAKqC,CAAA,EAAzB,yBAAyB,CAAzB;;;;;;;;;;;;;;;;ACzBb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,sVAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOf,QAAa,qBAAb;AAEE,uCAAA;AAAA;AAAiB;;AAFnB;AAAA;AAAA,mCAIU,CACP;AALH;;AAAA;AAAA,OAAA;;AAAa,IAAA,qBAAqB,GAAA,UAAA,CAAA,CALjC,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,kBADD;AAET,MAAA,QAAA,EAAA,eAAA,CAAA,mBAAA;AAAA;AAAA,+FAAA,CAAA,CAAA,WAFS;;;;AAAA,KAAV,CAKiC,E,mCAAA,CAAA,EAArB,qBAAqB,CAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACgBb,QAAa,kBAAb;AAAA;AAAA,KAAA;;AAAa,IAAA,kBAAkB,GAAA,UAAA,CAAA,CAZ9B,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS;AACR,MAAA,YAAY,EAAE,CAAC,yDAAA,CAAA,2BAAA,CAAA,CAA0B,gBAA3B,CADN;AAER,MAAA,OAAO,EAAE,CACP,4CAAA,CAAA,cAAA,CADO,EAEP,yDAAA,CAAA,2BAAA,CAFO,EAGP,4DAAA,CAAA,uBAAA,CAHO,EAIP,8CAAA,CAAA,YAAA,CAJO,EAKP,2CAAA,CAAA,aAAA,CALO,EAMP,2CAAA,CAAA,qBAAA,CANO,CAFD;AAUR,MAAA,SAAS,EAAE,CAAC,kDAAA,CAAA,qBAAA,CAAD;AAVH,KAAT,CAY8B,CAAA,EAAlB,kBAAkB,CAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBb,QAAa,mBAAb;AAEE,mCACU,IADV,EAEU,kBAFV,EAEgD;AAAA;;AADtC,aAAA,IAAA,GAAA,IAAA;AACA,aAAA,kBAAA,GAAA,kBAAA;AAA2C;;AAJvD;AAAA;AAAA,uCAMiB,EANjB,EAM2B;AACvB,iBAAO,KAAK,IAAL,CAAU,GAAV,WAA8B,KAAK,kBAAL,CAAwB,OAAtD,8BAAiF,EAAjF,EAAP;AACD;AARH;AAAA;AAAA,2CAUkB;AACd,iBAAO,KAAK,IAAL,CAAU,GAAV,WAAgC,KAAK,kBAAL,CAAwB,OAAxD,sBAAP;AACD;AAZH;AAAA;AAAA,yCAcmB,WAdnB,EAc2C;AACvC,iBAAO,KAAK,IAAL,CAAU,IAAV,WAAkB,KAAK,kBAAL,CAAwB,OAA1C,uBAAqE,WAArE,CAAP;AACD;AAhBH;AAAA;AAAA,0CAkBoB,WAlBpB,EAkB4C;AACxC,iBAAO,KAAK,IAAL,CAAU,GAAV,WAAiB,KAAK,kBAAL,CAAwB,OAAzC,8BAAoE,WAAW,CAAC,WAAhF,GAA+F,WAA/F,CAAP;AACD;AApBH;AAAA;AAAA,0CAsBoB,EAtBpB,EAsB8B;AAC1B,iBAAO,KAAK,IAAL,qBAAyB,KAAK,kBAAL,CAAwB,OAAjD,8BAA4E,EAA5E,EAAP;AACD;AAxBH;;AAAA;AAAA,OAAA;;;;cAGkB,iDAAA,CAAA,YAAA;;cACc,+DAAA,CAAA,oBAAA;;;;AAJnB,IAAA,mBAAmB,GAAA,UAAA,CAAA,CAD/B,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,EAC+B,E,iCAGd,iDAAA,CAAA,YAAA,C,EACc,+DAAA,CAAA,oBAAA,C,EAJA,CAAA,EAAnB,mBAAmB,CAAnB","sourcesContent":["export default \"<p>Add/Edit equipment</p>\\r\\n\\r\\n<mat-card class=\\\"example-card\\\">\\r\\n  <form *ngIf=\\\"formGroup\\\" [formGroup]=\\\"formGroup\\\">\\r\\n    <div class=\\\"example-container\\\">\\r\\n\\r\\n      <mat-form-field>\\r\\n        <input matInput placeholder=\\\"EquipmentId\\\" formControlName=\\\"equipmentId\\\" type=\\\"text\\\">\\r\\n\\r\\n        <mat-error *ngIf=\\\"formGroup.get('equipmentId').touched && formGroup.get('equipmentId').errors && formGroup.get('equipmentId').errors.required\\\">\\r\\n          EquipmenrId required!\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n\\r\\n      <mat-form-field>\\r\\n        <input matInput placeholder=\\\"PersonId\\\" formControlName=\\\"personId\\\" type=\\\"text\\\">\\r\\n\\r\\n        <mat-error *ngIf=\\\"formGroup.get('personId').touched && formGroup.get('personId').errors && formGroup.get('personId').errors.required\\\">\\r\\n          PersonId required!\\r\\n        </mat-error>\\r\\n      </mat-form-field>\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"example-button-row\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"save()\\\">Save</button>\\r\\n      <button mat-raised-button color=\\\"primary\\\" [routerLink]='routerLink'>Cancel</button>\\r\\n    </div>\\r\\n  </form>\\r\\n</mat-card>\\r\\n\"","export default \"<h1>Calibrations</h1>\\r\\n\\r\\n<p>Many calibrations in the list</p>\\r\\n\\r\\n<div class=\\\"example-button-row\\\">\\r\\n  <button mat-raised-button [routerLink]='[\\\"../edit\\\"]' color=\\\"primary\\\">Add</button>\\r\\n</div>\\r\\n<br>\\r\\n\\r\\n<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n\\r\\n<div class=\\\"mat-elevation-z8\\\">\\r\\n  <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n    <ng-container matColumnDef=\\\"equipmentId\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"width:20%\\\"> EquipmentId </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.equipmentId}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n\\r\\n    <ng-container matColumnDef=\\\"personId\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"width:20%\\\"> PersonId </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.personId}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"action\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"width:20%\\\"> Action </th>\\r\\n      <td mat-cell *matCellDef=\\\"let calibration\\\">\\r\\n        <button mat-icon-button matTooltip=\\\"Edit\\\" [matTooltipPosition]=\\\"'after'\\\">\\r\\n          <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\" [routerLink]=\\\"['../edit', calibration.id]\\\">edit</mat-icon>\\r\\n        </button>\\r\\n        <button mat-icon-button matTooltip=\\\"Delete\\\" [matTooltipPosition]=\\\"'after'\\\">\\r\\n          <mat-icon aria-label=\\\"Example icon-button with a heart icon \\\" (click)=\\\"deleteCalibration(calibration)\\\">delete</mat-icon>\\r\\n        </button>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n  </table>\\r\\n  <mat-progress-bar mode=\\\"indeterminate\\\" *ngIf=\\\"!calibrations\\\"></mat-progress-bar>\\r\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n\\r\\n</div>\\r\\n\"","export default \"<router-outlet></router-outlet>\\r\\n\"","export default \".example-container {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  padding: 5px;\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n  .example-container > * {\\r\\n    width: 100%;\\r\\n  }\\r\\n\\r\\n  body {\\r\\n  background-image: none;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY2FsaWJyYXRpb24vY2FsaWJyYXRpb25zLWVkaXQvY2FsaWJyYXRpb25zLWVkaXQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsWUFBWTtFQUNaLG1CQUFtQjtBQUNyQjs7RUFFRTtJQUNFLFdBQVc7RUFDYjs7RUFFRjtFQUNFLHNCQUFzQjtBQUN4QiIsImZpbGUiOiJzcmMvYXBwL2NhbGlicmF0aW9uL2NhbGlicmF0aW9ucy1lZGl0L2NhbGlicmF0aW9ucy1lZGl0LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXhhbXBsZS1jb250YWluZXIge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBwYWRkaW5nOiA1cHg7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxufVxyXG5cclxuICAuZXhhbXBsZS1jb250YWluZXIgPiAqIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuXHJcbmJvZHkge1xyXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XHJcbn1cclxuIl19 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { CalibrationsService } from '../calibrations.service';\r\nimport { Calibration } from '../calibrations.models';\r\n\r\n@Component({\r\n  selector: 'app-calibrations-edit',\r\n  templateUrl: './calibrations-edit.component.html',\r\n  styleUrls: ['./calibrations-edit.component.css']\r\n})\r\nexport class CalibrationsEditComponent implements OnInit {\r\n\r\n  private routerLink: string = '../list';\r\n\r\n  private calibrationId: number;\r\n\r\n  private isEdit: boolean = false;\r\n\r\n  public formGroup: FormGroup;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private calibrationsService: CalibrationsService,\r\n    private formBuilder: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.calibrationId = parseInt(this.route.snapshot.params['id']);\r\n\r\n    if (this.calibrationId) {\r\n      this.routerLink = '../../list';\r\n\r\n      this.calibrationsService.getCalibration(this.calibrationId).subscribe(res => {\r\n        this.initForm(res);\r\n        this.isEdit = true;\r\n      });\r\n    }\r\n    else {\r\n      this.initForm(<Calibration>{});\r\n    }\r\n  }\r\n\r\n  save() {\r\n    Object.keys(this.formGroup.controls).forEach(control => {\r\n      this.formGroup.get(control).markAsTouched();\r\n    });\r\n\r\n    if (this.formGroup.valid) {\r\n      let calibration = this.formGroup.value as Calibration;\r\n      calibration.equipmentId = calibration.equipmentId;\r\n      calibration.personId = calibration.personId;\r\n\r\n      if (this.isEdit) {\r\n        calibration.equipmentId = this.calibrationId\r\n\r\n        this.calibrationsService.modifyCalibration(calibration).subscribe(res => {\r\n          this.router.navigate(['/calibrations']);\r\n        });\r\n      } else {\r\n\r\n        this.calibrationsService.saveCalibrations(calibration).subscribe(res => {\r\n          this.router.navigate(['/calibrations']);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  initForm(calibration: Calibration) {\r\n    this.formGroup = this.formBuilder.group({\r\n      equipmentId: [calibration.equipmentId, Validators.required],\r\n      personId: [calibration.personId, Validators.required]\r\n    });\r\n  }\r\n\r\n}\r\n","export default \"table {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY2FsaWJyYXRpb24vY2FsaWJyYXRpb25zLWxpc3QvY2FsaWJyYXRpb25zLWxpc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGVBQWU7RUFDZixXQUFXO0FBQ2IiLCJmaWxlIjoic3JjL2FwcC9jYWxpYnJhdGlvbi9jYWxpYnJhdGlvbnMtbGlzdC9jYWxpYnJhdGlvbnMtbGlzdC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGUge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG4ubWF0LWZvcm0tZmllbGQge1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG4iXX0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Calibration } from '../calibrations.models';\r\nimport { CalibrationsService } from '../calibrations.service';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { PageEvent } from '@angular/material/paginator';\r\n\r\n@Component({\r\n  selector: 'app-calibrations-list',\r\n  templateUrl: './calibrations-list.component.html',\r\n  styleUrls: ['./calibrations-list.component.css']\r\n})\r\nexport class CalibrationsListComponent implements OnInit {\r\n\r\n  public displayedColumns: string[] = ['equipmentId', 'personId', 'action'];\r\n  public calibrations: Calibration[];\r\n\r\n  public dataSource;\r\n  public isloading = false;\r\n\r\n  constructor(private calibrationsService: CalibrationsService) { }\r\n\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n\r\n  ngOnInit() {\r\n    this.loadCalibrations();\r\n  }\r\n\r\n  async loadCalibrations() {\r\n    try {\r\n      this.calibrationsService.listCalibrations().subscribe(res => {\r\n        this.calibrations = res;\r\n        this.dataSource = new MatTableDataSource(this.calibrations);\r\n        this.isloading = true;\r\n        this.dataSource.paginator = this.paginator;\r\n      });\r\n    } catch (err) {\r\n      console.error(`this is not good: ${err.Message}`);\r\n      this.isloading = false;\r\n    }\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  deleteCalibration(calibration: Calibration) {\r\n    this.calibrationsService.deleteCalibration(calibration.equipmentId).subscribe(x => {\r\n      this.loadCalibrations();\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CalibrationsComponent } from './calibrations.component';\r\nimport { CalibrationsListComponent } from './calibrations-list/calibrations-list.component';\r\nimport { CalibrationsEditComponent } from './calibrations-edit/calibrations-edit.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: CalibrationsComponent,\r\n    children: [\r\n      { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n      { path: 'list', component: CalibrationsListComponent },\r\n      { path: 'edit/:id', component: CalibrationsEditComponent },\r\n      { path: 'edit', component: CalibrationsEditComponent },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class CalibrationsRoutingModule {\r\n  static routedComponents = [CalibrationsComponent, CalibrationsListComponent, CalibrationsEditComponent];\r\n}\r\n","export default \"body {\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY2FsaWJyYXRpb24vY2FsaWJyYXRpb25zLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSIsImZpbGUiOiJzcmMvYXBwL2NhbGlicmF0aW9uL2NhbGlicmF0aW9ucy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiYm9keSB7XHJcbn1cclxuIl19 */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-calibrations',\r\n  templateUrl: './calibrations.component.html',\r\n  styleUrls: ['./calibrations.component.css']\r\n})\r\nexport class CalibrationsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { CoreModule } from '../core/core.module';\r\nimport { AngularMaterialModule } from '../shared/angular-material.module';\r\n\r\nimport { CalibrationsRoutingModule } from './calibrations-routing.module';\r\nimport { CalibrationsService } from './calibrations.service';\r\n\r\n@NgModule({\r\n  declarations: [CalibrationsRoutingModule.routedComponents],\r\n  imports: [\r\n    CommonModule,\r\n    CalibrationsRoutingModule,\r\n    AngularMaterialModule,\r\n    CoreModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: [CalibrationsService],\r\n})\r\nexport class CalibrationsModule { }\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { ApplicationService } from \"../core/services/application.service\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Calibration } from \"./calibrations.models\";\r\n\r\n@Injectable()\r\nexport class CalibrationsService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private applicationService: ApplicationService) { }\r\n\r\n  getCalibration(id: number) {\r\n    return this.http.get<Calibration>(`${this.applicationService.baseUrl}api/Calibrations/${id}`);\r\n  }\r\n\r\n  listCalibrations() {\r\n    return this.http.get<Calibration[]>(`${this.applicationService.baseUrl}api/Calibrations`);\r\n  }\r\n\r\n  saveCalibrations(calibration: Calibration) {\r\n    return this.http.post(`${this.applicationService.baseUrl}api/Calibrations`, calibration);\r\n  }\r\n\r\n  modifyCalibration(calibration: Calibration) {\r\n    return this.http.put(`${this.applicationService.baseUrl}api/Calibrations/${calibration.equipmentId}`, calibration);\r\n  }\r\n\r\n  deleteCalibration(id: number) {\r\n    return this.http.delete<any>(`${this.applicationService.baseUrl}api/Calibrations/${id}`);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"calibration-calibrations-module-es5.js"}